
#include <string.h>
#include "{{ filename }}.h"

int {{ function_name }}_init({{ function_name }}_arg_t* arg, {{ function_name }}_res_t* res, {{ function_name }}_work_t* work) {
    if (!arg || !res || !work) {
        return -1; // Invalid pointers
    }

    // Initialize inputs
    {% for input in inputs %}
    {% if input.description %}// {{ input.description }}{% endif %}
    {% if input.dims %}
    {% for i in range(input.dims) %}
    arg->{{ input.name }}[{{ i }}] = {{ input.initial_data[i] }};
    {% endfor %}
    {% else %}
    arg->{{ input.name }} = {{ input.initial_data }};
    {% endif %}

    {% endfor %}
    
    // Initialize outputs
    memset(res, 0, sizeof(*res));

    return 0;
}

int {{ function_name }}_step({{ function_name }}_arg_t* arg, {{ function_name }}_res_t* res, {{ function_name }}_work_t* work) {
    if (!arg || !res || !work) {
        return -1; // Invalid pointers
    }
    
    // Marshal inputs to CasADi format
    const {{ float_type }}* kernel_arg[{{ function_name }}_SZ_ARG];
    {% for input in inputs %}
    kernel_arg[{{ loop.index0 }}] = {% if input.is_addr %}&{% endif %}arg->{{ input.name }};
    {% endfor %}
    
    // Marshal outputs to CasADi format
    {{ float_type }}* kernel_res[{{ function_name }}_SZ_RES];
    {% for output in outputs %}
    kernel_res[{{ loop.index0 }}] = {% if output.is_addr %}&{% endif %}res->{{ output.name }};
    {% endfor %}
    
    // Call kernel function
    return {{ function_name }}(kernel_arg, kernel_res, work->iw, work->w, 0);
}